if (dist=="logn") model<-aftreg(fmla,dist="lognormal", data=datasub)
if (dist=="gam") model<-flexsurvreg(fmla,dist="gengamma", data=datasub)
return(model)
}
View(modelparam)
POS1<-read.csv(POS1)
View(POS1)
getwd()
getwd()
read.csv(“POS.csv”, stringAsFactors = FALSE)
read.csv(“POS.csv”, stringAsFactors = FALSE)
path <- file.path(“~”,”datasets”,”myfile.csv”)
#set your path if different from you wd
> path
> read.csv(path, stringAsFactors = FALSE)
#use the path var instead of writing the whole path
> df <- read.csv(“myfile.csv”, stringAsFactors = FALSE)
> df
> str(df)
path <- file.path(“~”,”data”,”pos.csv”)
help path
help file.path()
help("file.path")
path <- file.path("C:\Users\Fra\Documents\Università\Data" "pos.tsv", )
path <- file.path("C:\Users\Fra\Documents\Università\Data", "pos.tsv" )
path <- file.path("C:\Users\Fra\Documents\Università\Data" "pos.tsv" )
getwd()
pos2<-read.csv("POS2.csv")
pos2<-read.csv("POS2.csv", stringsAsFactors = FALSE)
pos<-read.csv("POS.tsv", stringsAsFactors = FALSE)
read.table(file = 'POS.tsv', sep = '\t', header = TRUE)
pos2<-read.table(file = 'POS.tsv', sep = '\t', header = TRUE)
modelparam(Markov = FALSE, covs= "treat", transnum = 3, dist="wei", data="pos2")
modelparam(Markov = FALSE, covs= "treat",  dist="wei", data="pos2")
View(modelparam)
weimodel_pps <-phreg (Surv(time,status)~ treat
,dist="weibull",data=msmcancer3) ; weimodel_pps
modelparam(Markov = FALSE, covs= "treat", transnum = 1, dist="wei", data="pos2")
subset(pos2)
help(phreg)
??phreg
phreg
??eha
install.packages("eha", repos='http://cran.rstudio.com/')
load("~/Università/Funzioni/allcombos.RData")
ptm <- proc.time() #start counting the time it takes
View(CEplane)
CEplane<-function(x=incQALY, y=incCost, xlower=-2, xupper=2,
ylower=0, yupper=20000, ICER=30000, text="ICER= £30,000"){
plot(x,y,xlim=c(xlower,xupper), ylim=c(ylower,yupper),
xlab="Incremental QALY", ylab="Incremental Cost (£)")
abline(v=0,lty=3)
abline(h=0,lty=3)
if(is.na(ICER)==0) abline(0,ICER)
if (is.na(ICER)==0)text(xupper-0.75, yupper, text)
}
## xupper      UPPER LIMIT FOR THE HORIZONTAL AXIS
## ylower      LOWER LIMIT FOR THE VERTICAL AXIS
## yupper      UPPER LIMIT FOR THE VERTICAL AXIS
## QALY1       NAME OF VARIABLE CONTAINING THE INCREMENTAL QALY FOR TREATMENT ARM 1
##             (DERIVED USING THE PSAQALY FUNCTION)
## QALY2       NAME OF VARIABLE CONTAINING THE INCREMENTAL QALY FOR TREATMENT ARM 2
##             (DERIVED USING THE PSAQALY FUNCTION)
## cost1       NAME OF VARIABLE CONTAINING THE TOTAL EXPECTED COSTS FOR TREATMENT ARM 1
## cost2       NAME OF VARIABLE CONTAINING THE TOTAL EXPECTED COSTS FOR TREATMENT ARM 2
##========================================================================================
CEAC<-function(cRatiosim=c(seq(0,1000,100), seq(1500,5000,500),
seq(6000,30000,1000), seq(35000,100000,5000)),
nruns=1000,nruns2=1000, xlower=0, xupper=100000, ylower=0, yupper=1,
QALY1=QALY_RFC_dis, QALY2=QALY_FC_dis,
cost1=total_cost_RFC_dis, cost2=total_cost_FC_dis,
secondcurve=TRUE, QALY1_2=QALY_RFC_dis, QALY2_2=QALY_FC_dis,
cost1_2=total_cost_RFC_dis, cost2_2=total_cost_FC_dis){
### store incremental net monetary benefit for each draw
incNMBsim<-matrix(nrow=nruns, ncol=length(cRatiosim))
### store cost-effective indicator for each draw
is.cost.effsim<-matrix(rep(0, nruns*length(cRatiosim)),
nrow=nruns, ncol=length(cRatiosim))
### store mean of indicators
### i.e. the probability treatment is cost effective
meanicesim<-rep(NA,length(cRatiosim))
for (i in 1:length(cRatiosim)) {
incNMBsim[,i]<-(QALY1*cRatiosim[i] - cost1)-
(QALY2*cRatiosim[i] - cost2)
}
for (j in 1:length(cRatiosim)) {
for (i in 1:nruns) {
is.cost.effsim[i,j][incNMBsim[i,j]>0] <-1
}}
for (i in 1:length(cRatiosim)) {
meanicesim[i]<-mean(is.cost.effsim[,i])
}
options(scipen = 3)
plot(cRatiosim,meanicesim, type="l", xlim=c(xlower,xupper), ylim=c(ylower,yupper),
xlab="Value of ceiling ratio (£)",
ylab="Probability of being cost-effective ")
if (secondcurve==TRUE){
### store incremental net monetary benefit for each draw
incNMBsim2<-matrix(nrow=nruns2, ncol=length(cRatiosim))
### store cost-effective indicator for each draw
is.cost.effsim2<-matrix(rep(0, nruns2*length(cRatiosim)),
nrow=nruns2, ncol=length(cRatiosim))
### store mean of indicators
### i.e. the probability treatment is cost effective
meanicesim2<-rep(NA,length(cRatiosim))
for (i in 1:length(cRatiosim)) {
incNMBsim2[,i]<-(QALY1_2*cRatiosim[i] - cost1_2)-
(QALY2_2*cRatiosim[i] - cost2_2)
}
for (j in 1:length(cRatiosim)) {
for (i in 1:nruns2) {
is.cost.effsim2[i,j][incNMBsim2[i,j]>0] <-1
}}
for (i in 1:length(cRatiosim)) {
meanicesim2[i]<-mean(is.cost.effsim2[,i])
}
lines(cRatiosim,meanicesim2, type="l",lty=2)
}
}
aic<- -2*weimodel_pps$loglik[2]+2*nrow(weimodel_pps$var);aic
load("allcombos.RData")
install.packages(c("stringi", "stringr"))
install.packages("shiny")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='francescotranquillo', token='CDB49E1CDC86A1A3A07304188654CBC3', secret='lOzdE88XaHPXnzDgIjxX7VfYHhbzD2Ko3PuRZCD8')
source('~/.active-rstudio-document', echo=TRUE)
install.packages("shinydashboard")
source('~/.active-rstudio-document', echo=TRUE)
install.packages(DT)
install.packages("dtables")
source('~/.active-rstudio-document', echo=TRUE)
install.packages('DT')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
shiny::runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
shiny::runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
library(reshape2)
library(dplyr)
library(ggplot2)
library(plotly)
install.packages("plotly")
runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
library(shiny)
library(shinydashboard)
library (DT)
library (ggplot2)
library (plotly)
library(reshape2)
install.packages("dplyr")
install.packages("plotly")
Sys.getenv("R_LIBS_USER")
install.packages(c('crayon', 'pbdZMQ', 'devtools'))
devtools::install_github(paste0('IRkernel/', c('repr', 'IRdisplay', 'IRkernel')))
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
install.packages(c("shiny","shinydashboard","DT","ggplot2","plotly","reshape2","data.table"))
shiny::runApp('C:/Users/Fra/Downloads/Medical/Medinfo')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
shiny::runApp('~/GitHub/Serena')
install.packages(c("shiny","shinydashboard","DT","ggplot2","plotly","reshape2","data.table"))
install.packages(c("shiny", "shinydashboard", "DT", "ggplot2", "plotly", "reshape2", "data.table"))
shiny::runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
install.packages("data.table")
runApp('~/GitHub/Serena')
library(data.table)
install.packages("data.table")
install.packages("data.table")
runApp('~/GitHub/Serena')
install.packages("data.table", "c:/Users/Fra/Documents/R/win-library/3.4")
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
shiny::runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
ggplotly(ggplot(empdata,aes_string(x="Dates", y="HeartRate"))
+geom_point(aes(color=ab(par, numb1, numb2)))
+geom_line()
+scale_color_manual(values=cases)
+theme(legend.position='none')
+geom_hline(thr, yintercept=numb1, color="red")
+geom_hline(thr, yintercept=numb2, color="red")
)
shiny::runApp('~/GitHub/Serena')
shiny::runApp('~/GitHub/Serena')
shiny::runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
shiny::runApp('~/GitHub/Serena')
shiny::runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
runApp('~/GitHub/Serena')
knit_with_parameters('~/Projects/NMSECORmd.Rmd')
install.packages(c("bit", "broom", "caTools", "curl", "data.table", "dbplyr", "devtools", "dplyr", "eha", "evaluate", "ggplot2", "git2r", "glue", "haven", "highr", "htmlTable", "httpuv", "later", "mstate", "munsell", "openssl", "packrat", "pillar", "plotly", "purrr", "Rcpp", "RCurl", "reprex", "rlang", "rmarkdown", "rsconnect", "stringi", "tidyr", "tinytex", "utf8", "yaml"))
install.packages("prettydoc")
library(ggplot2)
library(plotly)
#funzione di riduzione del prezzo:
# X è il prezzo iniziale,
# Y è il numero di unità vendute in una singola transazione
# Z è il tasso di riduzione
pr<-function(x) x-y*x*z
p<-ggplot(data=df(x=0), mapping=aes(x=x))
p+ stat_function((fun=pr))
#funzione di riduzione del prezzo:
# X è il prezzo iniziale,
# Y è il numero di unità vendute in una singola transazione
# Z è il tasso di riduzione
pr<-function(x) x-y*x*z
p<-ggplot(data=data.frame(x=0), mapping=aes(x=x))
p+ stat_function((fun=pr))
View(pr)
View(pr)
p<-ggplot(data=data.frame(x=0), mapping=aes(x=x))
p+ stat_function((fun=pr))
plotly(
y=700000-25*700000*0.3
)
plotly(
y=700000-25*700000*0.3,
type=scatter,
mode=lines
)
trace_0 <- rnorm(100, mean = 5)
trace_1 <- rnorm(100, mean = 0)
trace_2 <- rnorm(100, mean = -5)
x <- c(1:100)
data <- data.frame(x, trace_0, trace_1, trace_2)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers')
trace_0 <- rnorm(100, mean = 5)
trace_1 <- rnorm(100, mean = 0)
trace_2 <- rnorm(100, mean = -5)
x <- c(1:100)
data <- data.frame(x, trace_0, trace_1, trace_2)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers')
p
f <- pr-pr*y*z
x <- c(1:100)
data <- data.frame(x, f)
p <- plot_ly(data, x = ~x, y = ~f, name = 'riduzione prezzo', type = 'scatter', mode = 'lines') %>%
p
p <- plot_ly(data, x = ~x, y = ~f, name = 'riduzione prezzo', type = 'scatter', mode = 'lines') %>%
p
f <- pr-pr*y*z
f <- function(pr,y,z) pr-pr*y*z
x <- c(1:100)
data <- data.frame(x, f)
p <- plot_ly(data, x = ~x, y = ~f, name = 'riduzione prezzo', type = 'scatter', mode = 'lines') %>%
p
f <- function(pr,y,z) pr-pr*y*z
x <- c(1:100)
y<-c(1:100)
z<-c(1:100)
data <- data.frame(x, f)
p <- plot_ly(data, x = ~x, y = ~f, name = 'riduzione prezzo', type = 'scatter', mode = 'lines') %>%
p
trace_0 <- rnorm(100, mean = 5)
trace_1 <- rnorm(100, mean = 0)
trace_2 <- rnorm(100, mean = -5)
x <- c(1:100)
data <- data.frame(x, trace_0, trace_1, trace_2)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers')
p
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers') %>%
title = "Drop down menus - Styling",
xaxis = list(domain = c(0.1, 1)),
yaxis = list(title = "y"),
updatemenus = list(
list(
y = 0.8,
buttons = list(
list(method = "restyle",
args = list("line.color", "blue"),
label = "Blue"),
list(method = "restyle",
args = list("line.color", "red"),
label = "Red"))),
list(
y = 0.7,
buttons = list(
list(method = "restyle",
args = list("visible", list(TRUE, FALSE)),
label = "Sin"),
list(method = "restyle",
args = list("visible", list(FALSE, TRUE)),
label = "Cos")))
)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers') %>%
layout(
title = "Drop down menus - Styling",
xaxis = list(domain = c(0.1, 1)),
yaxis = list(title = "y"),
updatemenus = list(
list(
y = 0.8,
buttons = list(
list(method = "restyle",
args = list("line.color", "blue"),
label = "Blue"),
list(method = "restyle",
args = list("line.color", "red"),
label = "Red"))),
list(
y = 0.7,
buttons = list(
list(method = "restyle",
args = list("visible", list(TRUE, FALSE)),
label = "Sin"),
list(method = "restyle",
args = list("visible", list(FALSE, TRUE)),
label = "Cos")))
)
)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers') %>%
layout(
title = "Drop down menus - Styling",
xaxis = list(domain = c(0.1, 1)),
yaxis = list(title = "y"),
updatemenus = list(
list(
y = 0.8,
buttons = list(
list(method = "restyle",
args = list("line.color", "blue"),
label = "Blue"),
list(method = "restyle",
args = list("line.color", "red"),
label = "Red"))),
list(
y = 0.7,
buttons = list(
list(method = "restyle",
args = list("visible", list(TRUE, FALSE)),
label = "Sin"),
list(method = "restyle",
args = list("visible", list(FALSE, TRUE)),
label = "Cos")))
)
)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers') %>%
layout(
title = "Drop down menus - Styling",
xaxis = list(domain = c(0.1, 1)),
yaxis = list(title = "y"),
updatemenus = list(
list(
y = 0.8,
buttons = list(
list(method = "restyle",
args = list("line.color", "blue"),
label = "Blue"),
list(method = "restyle",
args = list("line.color", "red"),
label = "Red"))),
list(
y = 0.7,
buttons = list(
list(method = "restyle",
args = list("visible", list(TRUE, FALSE)),
label = "Sin"),
list(method = "restyle",
args = list("visible", list(FALSE, TRUE)),
label = "Cos")))
)
)
p
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
layout(
title = "Drop down menus - Styling",
xaxis = list(domain = c(0.1, 1)),
yaxis = list(title = "y"),
updatemenus = list(
list(
y = 0.8,
buttons = list(
list(method = "restyle",
args = list("line.color", "blue"),
label = "Blue"),
list(method = "restyle",
args = list("line.color", "red"),
label = "Red"))),
list(
y = 0.7,
buttons = list(
list(method = "restyle",
args = list("visible", list(TRUE, FALSE)),
label = "Sin"),
list(method = "restyle",
args = list("visible", list(FALSE, TRUE)),
label = "Cos")))
)
)
p
library(plotly)
df<-read.csv("data.csv", header = TRUE, sep = ";", dec= ",", stringsAsFactors = FALSE)
View(data)
View(data)
df<-read.csv("data.csv", header = TRUE, sep = ";", dec= ",", stringsAsFactors = FALSE)
View(df)
library(brocks)
create.post("first post", date=Sys.Date)
create.post("first post", date=Sys.Date())
create.post("first post", date = Sys.Date())
create.post("first post")
create.post("first post", dir="_posts")
create.post("first post", dir="_posts", url=title)
create.post(filename)
create.post(filename="testpost.md")
create.post(filename="testpost.md", address = "_posts")
setwd("~/GitHub/GuidaEconomia")
read.csv("data.csv", header = TRUE)
df<-read.csv("data.csv", header = TRUE, sep = ";", dec= ",", stringsAsFactors = FALSE)
View(df)
df<-read.csv("nmseco.csv", header = TRUE, sep = ";", dec= ",", stringsAsFactors = FALSE)
View(df)
df<-read.csv("nmseco.csv", header = TRUE, sep = ",", dec= ",", stringsAsFactors = FALSE)
View(df)
ggplotly(ggplot(df, aes(Economy.Strength, Sell...., Buy....))+
geom_bar(stat="identity")
)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(df, aes(Economy.Strength, Sell...., Buy....))+
geom_bar(stat="identity")
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
df<-read.csv("data.csv", header = TRUE, sep = ";", dec= ",", stringsAsFactors = FALSE)
x<-df[,1]
y1<-df[,2]
y2<-df[,3]
y3<-df[,4]
maxdisc<-700000*0.8
p<-plot_ly(df, x=x, y= y1, name= '1 oggetti/transizione', type='scatter', mode='line')%>%
add_trace(y = ~y2, name = '10 oggetti/transizione', mode = 'lines')%>%
add_trace(y = ~y3, name = '100 oggetti/transizione', mode = 'lines')%>%
add_trace(y = maxdisc, name = 'massima riduzione di valore', type='scatter', alpha=0.7)
layout(p, xaxis=list(title="Numero di transazioni"), yaxis=list(title="Valore dell'oggetto"), title="Riduzione del prezzo per il Vetro Vivente")
